; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -p constraint-elimination -S %s | FileCheck %s

target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128-Fn32"

declare void @foo(i32)

define i1 @test(ptr %p1, ptr %p2) {
; CHECK-LABEL: define i1 @test(
; CHECK-SAME: ptr [[P1:%.*]], ptr [[P2:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    br label %[[LOOP_HEADER:.*]]
; CHECK:       [[LOOP_HEADER]]:
; CHECK-NEXT:    [[IV:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[IV_NEXT:%.*]], %[[LOOP_LATCH:.*]] ]
; CHECK-NEXT:    [[L:%.*]] = load i32, ptr [[P1]], align 1
; CHECK-NEXT:    [[C:%.*]] = icmp ugt i32 [[IV]], [[L]]
; CHECK-NEXT:    br i1 [[C]], label %[[EXIT:.*]], label %[[LOOP_LATCH]]
; CHECK:       [[LOOP_LATCH]]:
; CHECK-NEXT:    call void @foo(i32 [[IV]])
; CHECK-NEXT:    [[IV_NEXT]] = add nuw i32 [[IV]], 1
; CHECK-NEXT:    br label %[[LOOP_HEADER]]
; CHECK:       [[EXIT]]:
; CHECK-NEXT:    [[RES:%.*]] = icmp ne ptr [[P2]], null
; CHECK-NEXT:    ret i1 [[RES]]
;
entry:
  br label %loop.header

loop.header:
  %iv = phi i32 [ 0, %entry ], [ %iv.next, %loop.latch ]
  %l = load i32, ptr %p1, align 1
  %c = icmp ugt i32 %iv, %l
  br i1 %c, label %exit, label %loop.latch

loop.latch:
  call void @foo(i32 %iv)
  %iv.next = add nuw i32 %iv, 1
  br label %loop.header

exit:
  %res = icmp ne ptr %p2, null
  ret i1 %res
}
