; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=constraint-elimination -S %s | FileCheck %s

; Tests for using inbounds information from GEPs with different index types.

declare void @noundef(ptr noundef)
declare void @llvm.assume(i1)

define i1 @inbounds_poison_is_ub_different_index_types_1(ptr %src, i16 %n, i16 %idx) {
; CHECK-LABEL: @inbounds_poison_is_ub_different_index_types_1(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[N_EXT:%.*]] = zext i16 [[N:%.*]] to i32
; CHECK-NEXT:    [[IDX_EXT:%.*]] = zext i16 [[IDX:%.*]] to i32
; CHECK-NEXT:    [[N_EXT_64:%.*]] = zext i32 [[N_EXT]] to i64
; CHECK-NEXT:    [[CMP_IDX:%.*]] = icmp ult i32 [[IDX_EXT]], [[N_EXT]]
; CHECK-NEXT:    [[IDX_POS:%.*]] = icmp sge i16 [[IDX]], 0
; CHECK-NEXT:    [[N_POS:%.*]] = icmp sge i16 [[N]], 0
; CHECK-NEXT:    call void @llvm.assume(i1 [[IDX_POS]])
; CHECK-NEXT:    call void @llvm.assume(i1 [[N_POS]])
; CHECK-NEXT:    [[UPPER:%.*]] = getelementptr inbounds i32, ptr [[SRC:%.*]], i64 [[N_EXT_64]]
; CHECK-NEXT:    call void @noundef(ptr [[UPPER]])
; CHECK-NEXT:    br i1 [[CMP_IDX]], label [[THEN:%.*]], label [[ELSE:%.*]]
; CHECK:       then:
; CHECK-NEXT:    [[SRC_IDX_1:%.*]] = getelementptr i32, ptr [[SRC]], i32 [[IDX_EXT]]
; CHECK-NEXT:    ret i1 true
; CHECK:       else:
; CHECK-NEXT:    [[UPPER_2:%.*]] = getelementptr inbounds i32, ptr [[SRC]], i64 [[N_EXT_64]]
; CHECK-NEXT:    [[SRC_IDX_2:%.*]] = getelementptr i32, ptr [[SRC]], i32 [[IDX_EXT]]
; CHECK-NEXT:    [[CMP_UPPER_2:%.*]] = icmp ule ptr [[SRC_IDX_2]], [[UPPER]]
; CHECK-NEXT:    ret i1 [[CMP_UPPER_2]]
;
entry:
  %n.ext = zext i16 %n to i32
  %idx.ext = zext i16 %idx to i32
  %n.ext.64 = zext i32 %n.ext to i64
  %cmp.idx = icmp ult i32 %idx.ext, %n.ext
  %idx.pos = icmp sge i16 %idx, 0
  %n.pos = icmp sge i16 %n, 0
  call void @llvm.assume(i1 %idx.pos)
  call void @llvm.assume(i1 %n.pos)
  %upper = getelementptr inbounds i32, ptr %src, i64 %n.ext.64
  call void @noundef(ptr %upper)
  br i1 %cmp.idx, label %then, label %else

then:
  %src.idx.1 = getelementptr i32, ptr %src, i32 %idx.ext
  %cmp.upper.1 = icmp ule ptr %src.idx.1, %upper
  ret i1 %cmp.upper.1

else:
  %upper.2 = getelementptr inbounds i32, ptr %src, i64 %n.ext.64
  %src.idx.2 = getelementptr i32, ptr %src, i32 %idx.ext
  %cmp.upper.2 = icmp ule ptr %src.idx.2, %upper
  ret i1 %cmp.upper.2
}

define i1 @inbounds_poison_is_ub_different_index_types_2(ptr %src, i16 %n, i16 %idx) {
; CHECK-LABEL: @inbounds_poison_is_ub_different_index_types_2(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[N_EXT:%.*]] = zext i16 [[N:%.*]] to i32
; CHECK-NEXT:    [[CMP_IDX:%.*]] = icmp ult i16 [[IDX:%.*]], [[N]]
; CHECK-NEXT:    [[IDX_POS:%.*]] = icmp sge i16 [[IDX]], 0
; CHECK-NEXT:    [[N_POS:%.*]] = icmp sge i16 [[N]], 0
; CHECK-NEXT:    call void @llvm.assume(i1 [[IDX_POS]])
; CHECK-NEXT:    call void @llvm.assume(i1 [[N_POS]])
; CHECK-NEXT:    [[UPPER:%.*]] = getelementptr inbounds i32, ptr [[SRC:%.*]], i32 [[N_EXT]]
; CHECK-NEXT:    call void @noundef(ptr [[UPPER]])
; CHECK-NEXT:    [[UPPER_1:%.*]] = getelementptr inbounds i32, ptr [[SRC]], i32 1
; CHECK-NEXT:    call void @noundef(ptr [[UPPER_1]])
; CHECK-NEXT:    br i1 [[CMP_IDX]], label [[THEN:%.*]], label [[ELSE:%.*]]
; CHECK:       then:
; CHECK-NEXT:    [[SRC_IDX_1:%.*]] = getelementptr i32, ptr [[SRC]], i16 [[IDX]]
; CHECK-NEXT:    ret i1 true
; CHECK:       else:
; CHECK-NEXT:    [[SRC_IDX_2:%.*]] = getelementptr i32, ptr [[SRC]], i16 [[IDX]]
; CHECK-NEXT:    [[CMP_UPPER_2:%.*]] = icmp ule ptr [[SRC_IDX_2]], [[UPPER]]
; CHECK-NEXT:    ret i1 [[CMP_UPPER_2]]
;
entry:
  %n.ext = zext i16 %n to i32
  %cmp.idx = icmp ult i16 %idx, %n
  %idx.pos = icmp sge i16 %idx, 0
  %n.pos = icmp sge i16 %n, 0
  call void @llvm.assume(i1 %idx.pos)
  call void @llvm.assume(i1 %n.pos)
  %upper = getelementptr inbounds i32, ptr %src, i32 %n.ext
  call void @noundef(ptr %upper)
  %upper.1 = getelementptr inbounds i32, ptr %src, i32 1
  call void @noundef(ptr %upper.1)
  br i1 %cmp.idx, label %then, label %else

then:
  %src.idx.1 = getelementptr i32, ptr %src, i16 %idx
  %cmp.upper.1 = icmp ule ptr %src.idx.1, %upper
  ret i1 %cmp.upper.1

else:
  %src.idx.2 = getelementptr i32, ptr %src, i16 %idx
  %cmp.upper.2 = icmp ule ptr %src.idx.2, %upper
  ret i1 %cmp.upper.2
}

define i1 @inbounds_poison_is_ub_different_index_types_3(ptr %src, i16 %n, i16 %idx) {
; CHECK-LABEL: @inbounds_poison_is_ub_different_index_types_3(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[IDX_EXT:%.*]] = zext i16 [[IDX:%.*]] to i32
; CHECK-NEXT:    [[CMP_IDX:%.*]] = icmp ult i16 [[IDX]], [[N:%.*]]
; CHECK-NEXT:    [[IDX_POS:%.*]] = icmp sge i16 [[IDX]], 0
; CHECK-NEXT:    [[N_POS:%.*]] = icmp sge i16 [[N]], 0
; CHECK-NEXT:    call void @llvm.assume(i1 [[IDX_POS]])
; CHECK-NEXT:    call void @llvm.assume(i1 [[N_POS]])
; CHECK-NEXT:    [[UPPER_1:%.*]] = getelementptr inbounds i32, ptr [[SRC:%.*]], i32 1
; CHECK-NEXT:    call void @noundef(ptr [[UPPER_1]])
; CHECK-NEXT:    [[UPPER_N:%.*]] = getelementptr inbounds i32, ptr [[SRC]], i16 [[N]]
; CHECK-NEXT:    call void @noundef(ptr [[UPPER_N]])
; CHECK-NEXT:    br i1 [[CMP_IDX]], label [[THEN:%.*]], label [[ELSE:%.*]]
; CHECK:       then:
; CHECK-NEXT:    [[SRC_IDX_1:%.*]] = getelementptr i32, ptr [[SRC]], i32 [[IDX_EXT]]
; CHECK-NEXT:    ret i1 true
; CHECK:       else:
; CHECK-NEXT:    [[SRC_IDX_2:%.*]] = getelementptr i32, ptr [[SRC]], i32 [[IDX_EXT]]
; CHECK-NEXT:    [[CMP_UPPER_2:%.*]] = icmp ule ptr [[SRC_IDX_2]], [[UPPER_N]]
; CHECK-NEXT:    ret i1 [[CMP_UPPER_2]]
;
entry:
  %idx.ext = zext i16 %idx to i32
  %cmp.idx = icmp ult i16 %idx, %n
  %idx.pos = icmp sge i16 %idx, 0
  %n.pos = icmp sge i16 %n, 0
  call void @llvm.assume(i1 %idx.pos)
  call void @llvm.assume(i1 %n.pos)
  %upper.1 = getelementptr inbounds i32, ptr %src, i32 1
  call void @noundef(ptr %upper.1)
  %upper.n = getelementptr inbounds i32, ptr %src, i16 %n
  call void @noundef(ptr %upper.n)
  br i1 %cmp.idx, label %then, label %else

then:
  %src.idx.1 = getelementptr i32, ptr %src, i32 %idx.ext
  %cmp.upper.1 = icmp ule ptr %src.idx.1, %upper.n
  ret i1 %cmp.upper.1

else:
  %src.idx.2 = getelementptr i32, ptr %src, i32 %idx.ext
  %cmp.upper.2 = icmp ule ptr %src.idx.2, %upper.n
  ret i1 %cmp.upper.2
}
