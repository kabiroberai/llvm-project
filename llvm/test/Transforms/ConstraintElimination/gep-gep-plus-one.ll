; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=constraint-elimination -S %s | FileCheck %s

%struct.value_entry_s = type { ptr, ptr }

define noundef i1 @test_const_offset_gep_gep_plus_1_known_1(ptr %src) {
; CHECK-LABEL: @test_const_offset_gep_gep_plus_1_known_1(
; CHECK-NEXT:    [[UPPER:%.*]] = getelementptr inbounds [[STRUCT_VALUE_ENTRY_S:%.*]], ptr [[SRC:%.*]], i64 10
; CHECK-NEXT:    [[SRC_PLUS_1:%.*]] = getelementptr [[STRUCT_VALUE_ENTRY_S]], ptr [[SRC]], i64 1
; CHECK-NEXT:    [[GEP_1:%.*]] = getelementptr [[STRUCT_VALUE_ENTRY_S]], ptr [[SRC_PLUS_1]], i64 1
; CHECK-NEXT:    ret i1 true
;
  %upper = getelementptr inbounds %struct.value_entry_s, ptr %src, i64 10
  %src.plus.1 = getelementptr %struct.value_entry_s, ptr %src, i64 1
  %gep.1  = getelementptr %struct.value_entry_s, ptr %src.plus.1, i64 1
  %c.1 = icmp ule ptr %gep.1, %upper
  ret i1 %c.1
}

define noundef i1 @test_const_offset_gep_gep_plus_1_known_2(ptr %src) {
; CHECK-LABEL: @test_const_offset_gep_gep_plus_1_known_2(
; CHECK-NEXT:    [[UPPER:%.*]] = getelementptr inbounds [[STRUCT_VALUE_ENTRY_S:%.*]], ptr [[SRC:%.*]], i64 10
; CHECK-NEXT:    call void @is_noundef(ptr [[UPPER]])
; CHECK-NEXT:    [[SRC_PLUS_1:%.*]] = getelementptr [[STRUCT_VALUE_ENTRY_S]], ptr [[SRC]], i64 0
; CHECK-NEXT:    [[GEP_1:%.*]] = getelementptr [[STRUCT_VALUE_ENTRY_S]], ptr [[SRC_PLUS_1]], i64 1
; CHECK-NEXT:    ret i1 false
;
  %upper = getelementptr inbounds %struct.value_entry_s, ptr %src, i64 10
  call void @is_noundef(ptr %upper)
  %src.plus.1 = getelementptr %struct.value_entry_s, ptr %src, i64 0
  %gep.1  = getelementptr %struct.value_entry_s, ptr %src.plus.1, i64 1
  %c.1 = icmp ule ptr %gep.1, %src
  ret i1 %c.1
}

define noundef i1 @test_const_offset_gep_gep_plus_1_known_3(ptr %src) {
; CHECK-LABEL: @test_const_offset_gep_gep_plus_1_known_3(
; CHECK-NEXT:    [[UPPER:%.*]] = getelementptr inbounds [[STRUCT_VALUE_ENTRY_S:%.*]], ptr [[SRC:%.*]], i64 10
; CHECK-NEXT:    [[SRC_PLUS_1:%.*]] = getelementptr [[STRUCT_VALUE_ENTRY_S]], ptr [[SRC]], i64 9
; CHECK-NEXT:    [[GEP_1:%.*]] = getelementptr [[STRUCT_VALUE_ENTRY_S]], ptr [[SRC_PLUS_1]], i64 1
; CHECK-NEXT:    ret i1 true
;
  %upper = getelementptr inbounds %struct.value_entry_s, ptr %src, i64 10
  %src.plus.1 = getelementptr %struct.value_entry_s, ptr %src, i64 9
  %gep.1  = getelementptr %struct.value_entry_s, ptr %src.plus.1, i64 1
  %c.1 = icmp ule ptr %gep.1, %upper
  ret i1 %c.1
}

define noundef i1 @test_const_offset_gep_field_0_gep_plus_1_known(ptr %src) {
; CHECK-LABEL: @test_const_offset_gep_field_0_gep_plus_1_known(
; CHECK-NEXT:    [[UPPER:%.*]] = getelementptr inbounds [[STRUCT_VALUE_ENTRY_S:%.*]], ptr [[SRC:%.*]], i64 10
; CHECK-NEXT:    [[SRC_PLUS_1:%.*]] = getelementptr [[STRUCT_VALUE_ENTRY_S]], ptr [[SRC]], i64 9, i32 0
; CHECK-NEXT:    [[GEP_1:%.*]] = getelementptr [[STRUCT_VALUE_ENTRY_S]], ptr [[SRC_PLUS_1]], i64 1
; CHECK-NEXT:    ret i1 true
;
  %upper = getelementptr inbounds %struct.value_entry_s, ptr %src, i64 10
  %src.plus.1 = getelementptr %struct.value_entry_s, ptr %src, i64 9, i32 0
  %gep.1  = getelementptr %struct.value_entry_s, ptr %src.plus.1, i64 1
  %c.1 = icmp ule ptr %gep.1, %upper
  ret i1 %c.1
}


define noundef i1 @test_const_offset_gep_field_1_gep_plus_1_not_known(ptr %src) {
; CHECK-LABEL: @test_const_offset_gep_field_1_gep_plus_1_not_known(
; CHECK-NEXT:    [[UPPER:%.*]] = getelementptr inbounds [[STRUCT_VALUE_ENTRY_S:%.*]], ptr [[SRC:%.*]], i64 10
; CHECK-NEXT:    [[SRC_PLUS_1:%.*]] = getelementptr [[STRUCT_VALUE_ENTRY_S]], ptr [[SRC]], i64 9, i32 1
; CHECK-NEXT:    [[GEP_1:%.*]] = getelementptr [[STRUCT_VALUE_ENTRY_S]], ptr [[SRC_PLUS_1]], i64 1
; CHECK-NEXT:    [[C_1:%.*]] = icmp ule ptr [[GEP_1]], [[UPPER]]
; CHECK-NEXT:    ret i1 [[C_1]]
;
  %upper = getelementptr inbounds %struct.value_entry_s, ptr %src, i64 10
  %src.plus.1 = getelementptr %struct.value_entry_s, ptr %src, i64 9, i32 1
  %gep.1  = getelementptr %struct.value_entry_s, ptr %src.plus.1, i64 1
  %c.1 = icmp ule ptr %gep.1, %upper
  ret i1 %c.1
}

declare void @is_noundef(ptr noundef)

define noundef i1 @test_const_offset_gep_plus_1_not_known_inbounds_1(ptr %src) {
; CHECK-LABEL: @test_const_offset_gep_plus_1_not_known_inbounds_1(
; CHECK-NEXT:    [[UPPER:%.*]] = getelementptr inbounds [[STRUCT_VALUE_ENTRY_S:%.*]], ptr [[SRC:%.*]], i64 10
; CHECK-NEXT:    [[SRC_PLUS_1:%.*]] = getelementptr [[STRUCT_VALUE_ENTRY_S]], ptr [[SRC]], i64 10, i32 1
; CHECK-NEXT:    [[GEP_1:%.*]] = getelementptr [[STRUCT_VALUE_ENTRY_S]], ptr [[SRC_PLUS_1]], i64 1
; CHECK-NEXT:    [[C_1:%.*]] = icmp ule ptr [[GEP_1]], [[UPPER]]
; CHECK-NEXT:    ret i1 [[C_1]]
;
  %upper = getelementptr inbounds %struct.value_entry_s, ptr %src, i64 10
  %src.plus.1 = getelementptr %struct.value_entry_s, ptr %src, i64 10, i32 1
  %gep.1  = getelementptr %struct.value_entry_s, ptr %src.plus.1, i64 1
  %c.1 = icmp ule ptr %gep.1, %upper
  ret i1 %c.1
}

define noundef i1 @test_const_offset_gep_plus_1_not_known_inbounds_2(ptr %src) {
; CHECK-LABEL: @test_const_offset_gep_plus_1_not_known_inbounds_2(
; CHECK-NEXT:    [[UPPER:%.*]] = getelementptr inbounds [[STRUCT_VALUE_ENTRY_S:%.*]], ptr [[SRC:%.*]], i64 10
; CHECK-NEXT:    [[SRC_PLUS_1:%.*]] = getelementptr [[STRUCT_VALUE_ENTRY_S]], ptr [[SRC]], i64 11
; CHECK-NEXT:    [[GEP_1:%.*]] = getelementptr [[STRUCT_VALUE_ENTRY_S]], ptr [[SRC_PLUS_1]], i64 1
; CHECK-NEXT:    [[C_1:%.*]] = icmp ule ptr [[GEP_1]], [[UPPER]]
; CHECK-NEXT:    ret i1 [[C_1]]
;
  %upper = getelementptr inbounds %struct.value_entry_s, ptr %src, i64 10
  %src.plus.1 = getelementptr %struct.value_entry_s, ptr %src, i64 11
  %gep.1  = getelementptr %struct.value_entry_s, ptr %src.plus.1, i64 1
  %c.1 = icmp ule ptr %gep.1, %upper
  ret i1 %c.1
}

define noundef i1 @_value_entry_table_get11(i64 %idx, i64 %N, ptr %src) {
; CHECK-LABEL: @_value_entry_table_get11(
; CHECK-NEXT:    [[IDX_ULT_N:%.*]] = icmp ult i64 [[IDX:%.*]], [[N:%.*]]
; CHECK-NEXT:    br i1 [[IDX_ULT_N]], label [[THEN:%.*]], label [[ELSE:%.*]]
; CHECK:       then:
; CHECK-NEXT:    [[UPPER:%.*]] = getelementptr inbounds [[STRUCT_VALUE_ENTRY_S:%.*]], ptr [[SRC:%.*]], i64 [[N]]
; CHECK-NEXT:    call void @is_noundef(ptr [[UPPER]])
; CHECK-NEXT:    [[SRC_PLUS_1:%.*]] = getelementptr [[STRUCT_VALUE_ENTRY_S]], ptr [[SRC]], i64 [[IDX]]
; CHECK-NEXT:    [[GEP_1:%.*]] = getelementptr [[STRUCT_VALUE_ENTRY_S]], ptr [[SRC_PLUS_1]], i64 1
; CHECK-NEXT:    [[C_1:%.*]] = icmp ule ptr [[GEP_1]], [[UPPER]]
; CHECK-NEXT:    ret i1 [[C_1]]
; CHECK:       else:
; CHECK-NEXT:    ret i1 false
;
  %idx.ult.N = icmp ult i64 %idx, %N
  br i1 %idx.ult.N, label %then, label %else

then:
  %upper = getelementptr inbounds %struct.value_entry_s, ptr %src, i64 %N
  call void @is_noundef(ptr %upper)
  %src.plus.1 = getelementptr %struct.value_entry_s, ptr %src, i64 %idx
  %gep.1  = getelementptr %struct.value_entry_s, ptr %src.plus.1, i64 1
  %c.1 = icmp ule ptr %gep.1, %upper
  ret i1 %c.1

else:
  ret i1 false
}

declare void @llvm.assume(i1)
